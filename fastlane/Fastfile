

##################################### SETTINGS #####################################

inhouse_apple_id = 'unicorn@ackee.cz'
production_apple_id = 'ios@ackee.cz'
connect_apple_id = 'ios@ackee.cz'
connect_team_id = "xxx"

####################################################################################

#import "../../fastlane/fastlane/Fastfile"
import(download_from_git(url: 'git@gitlab.ack.ee:Ackee/fastlane.git', use_cache: is_xcode ))


  desc "Downloads provisioning for all environments"
  lane :provisioning do |options|
    environment = options[:environment]

    if environment && !(is_environment(environment: environment))
      raise "Unknown environment #{environment}"
    end

    if !environment || environment == "Development"
      provisioning_match(configuration: "Debug",
                        type: "development",
                        use_wildcard: true,
                        username: inhouse_apple_id,
                        team_id: team_id("Development"),
                        readonly: true)
    end

    if !environment || environment == "Stage"
      provisioning_match(configuration: "AdHoc",
                        type: "enterprise",
                        use_wildcard: true,
                        username: inhouse_apple_id,
                        team_id: team_id("Stage"),
                        readonly: true)
    end

    if !environment || environment == "Production"
      provisioning_match(configuration: "AppStore",
                        type: "appstore",
                        app_identifier: app_identifier("Production"),
                        username: production_apple_id,
                        git_url: ENV["ACK_PRODUCTION_MATCH_GIT"],
                        team_id: team_id("Production"),
                        readonly: true)

      #Use sigh only for client accounts (on our account you would use match)
      # provisioning_sigh(configuration: "AppStore",
      #                   username: production_apple_id,
      #                   team_id: team_id("Production"),
      #                   app_identifier: app_identifier("Production"))
    end

  end

  desc "Submit new **beta** build to Hockey app"
  lane :beta do

    environment = "Stage"

    #Pods
  	pod_install

    #Build number
  	build_number = number_of_commits
		set_build_number(build_number: build_number)

    #Download provisioning
    provisioning(environment: environment)

    #Setup environments, app identifier and app name
    set_environment(environment: environment)

    #Setup badge for beta
    badge(shield: "#{get_version_number}-#{number_of_commits}-blue", dark: true, shield_no_resize: true)

    begin
      gym(
      	scheme: environment,
  		  configuration: "AdHoc",
        provisioning_profile_path: lane_context[SharedValues::SIGH_PROFILE_PATH],
        #export_team_id: inhouse_team_id
  		)
    ensure
      # Put badge back to original
      sh "git checkout -- ../Resources/Images.xcassets/"
    end

    if !is_ci
        hockey_identifier = get_environment_plist_value(key: "hockey_identifier", environment: environment)

        hockey(
              public_identifier: hockey_identifier,
              notify: '0'
        )
    end
  end


  desc "Deploy new version to the App Store (and also hockey app)"
  lane :appstore do |options|

      environment = "Production"

      pod_install

    	build_number = number_of_commits
  		set_build_number(build_number: build_number)

      #Setup environments, app identifier and app name
      set_environment(environment: environment)

      if !options[:skip_snapshot]
        snapshot
      end

      provisioning(environment:environment)

      gym(
  		  scheme: environment,
        configuration: "AppStore",
  		  clean: true
  		)

      deliver(
      		username: connect_apple_id,
          team_id: connect_team_id,
          force: is_ci
      )
  end



  desc "Switches environment and sets app_name and app_identifier in plist"
  lane :set_environment do |options|
      if is_xcode
          UI.message "Xcode run script phase"
      end

      environment = options[:environment]

      if !is_environment(environment: environment)
          raise "Unknown environment #{environment}"
      end

      display_name = app_name(environment)
      app_identifier =  app_identifier(environment)

      UI.message "Setting environment for #{environment}"

      # Change environment plist
      replace_environment_plist(environment: environment)

      UI.message "Setting app name to #{display_name} and app identifier to #{app_identifier}"

      update_info_plist(display_name: display_name, app_identifier: app_identifier, plist_path: ENV["FL_PROJECT_PLIST"])
  end






#end
