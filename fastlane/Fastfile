

##################################### SETTINGS #####################################

inhouse_apple_id = 'unicorn@ackee.cz'
inhouse_team_id = 'PXDF48X6VX' 

connect_apple_id = 'unicorn@ackee.cz' #CHANGE if using client account
connect_team_id = '3SMVP6VZP8' #<-- CHANGE if more team 

slack_url = "https://hooks.slack.com/services/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" #Hook to channel you want to send all messages <-- #rokKvality

 # Do not change if you don't have to (We don't want to create provisioning profile for every app)


####################################################################################

import_from_git(url: 'git@gitlab.ack.ee:Ackee/project-skeleton.git',
               path: 'fastlane/SharedFastfile',
               branch: 'environments')


	before_all do
		ENV["SLACK_URL"] = slack_url # Webhook URL created in Slack
  end

  

  #CHANGE if you want to use different provisioning
  desc "Downloads provisioning for all environments"
  lane :provisioning do |options|
    environment = options[:environment]
    
    if environment && !(is_environment(environment))
      raise "Unknown environment #{environment}"
    end

    if !environment || environment == "Development"
      provisioning_match(environment, "development", Config.enterprise_wildcard, Config.inhouse_certificate_git, inhouse_apple_id, inhouse_team_id, true)
    end

    if !environment || environment == "AdHoc"
      provisioning_match(environment, "enterprise", Config.enterprise_wildcard, Config.inhouse_certificate_git, inhouse_apple_id, inhouse_team_id, true)
    end
    
    if !environment || environment == "AppStore"
      provisioning_match(environment, "appstore", app_identifier(environment), Config.production_certificate_git, production_apple_id, production_team_id, true)
      #Use sigh only for client accounts (on our account you would use match)
      #provisioning_sigh("AppStore", "appstore", app_identifier(environment), production_apple_id, production_team_id)
    end

  end

  

	
  desc "Submit new **Beta** build to Hockey app"
  lane :beta do

    environment = "AdHoc"

    #Pods
  	pod_install

    #Build number
  	build_number = number_of_commits
		increment_build_number(build_number: build_number)

    #Download provisioning
    provisioning(environment: environment)

    #Setup environments, app identifier and app name
    setup_environment(environment: environment)

    #Setup badge for beta
    badge(shield: "#{get_version_number}-#{number_of_commits}-blue", dark: true, shield_no_resize: true)

    begin
      gym(
      	scheme: "Development",
  		  configuration: "AdHoc",
        provisioning_profile_path: lane_context[SharedValues::SIGH_PROFILE_PATH],
        export_team_id: inhouse_team_id
  		)
    ensure
      sh "git checkout -- ../Resources/Images.xcassets/"
    end

    if !is_ci
        hockey_identifier = get_environment_plist_value(key: "hockey_identifier", environment: environment)
        upload_to_hockey(identifier: hockey_identifier)

        # hockey_link = lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] 

        # slack(
        #     message: "New version uploaded to HockeyApp! #{hockey_link}",
        #     success: true
        #   )
    end
  end

  
  desc "Deploy new version to the App Store (and also hockey app)"
  lane :appstore do |options|
      #ensure_git_status_clean
    	pod_install

    	build_number = number_of_commits
  		increment_build_number(build_number: build_number)

      #Setup environments, app identifier and app name
      setup_environment(environment: "AppStore")

    	#ensure_git_status_clean
  		

      if !options[:skip_snapshot]
        snapshot
      end

      provisioning(environment:"AppStore")

      gym(
  		  scheme: "AppStore",
        configuration: "AppStore",
  		  clean: true,
  		)
  		
      if !is_ci
  		  upload_to_hockey(environment: "AppStore")
      end

      if is_ci 
        deliver(
      		username: connect_apple_id,
          team_id: connect_team_id,
          force: true
      	)
      else
        deliver(
          username: connect_apple_id,
          team_id: connect_team_id,
        )
      end

      slack(
          message: "Deployed new version to AppStore!",
          success: true
        )

  end

  error do |lane, exception|
    if is_ci
      slack(
        message: exception.message,
        success: false
      )
    end
  end

  


  
#end