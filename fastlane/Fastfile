

##################################### SETTINGS #####################################

app_language = "English" #CHANGE

app_name_dev = "Sample Testing Δ" # CHANGE
app_name_beta = "Sample Testing β" # CHANGE
app_name_appstore = "Sample Testing" # CHANGE

app_identifier_dev = 'cz.ackee.enterprise.sampletesting.dev' #CHANGE
app_identifier_beta = 'cz.ackee.enterprise.sampletesting.beta' #CHANGE
app_identifier_appstore = 'cz.ackee.SampleTesting' #CHANGE

inhouse_apple_id = 'enterprise@ackee.cz'
connect_apple_id = 'ios@ackee.cz'

slack_url = "https://hooks.slack.com/services/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" #Hook to channel you want to send all messages <-- #rokKvality

hockey_api_token = "90fc8b51202f48bf9aa9772a7238f946" 
enterprise_wildcard = "cz.ackee.enterprise.*" # Do not change if you don't have to (We don't want to create provisioning profile for every app)


environment_plist_directory = "Environment"
environment_plist_hockey_key = "hockey_identifier"


####################################################################################



fastlane_version "1.55.0"

	before_all do
		ENV["SLACK_URL"] = slack_url # Webhook URL created in Slack
	end

	desc "Installs FixCode which disables the \"Fix Issue\" button in Xcode"
	  lane :xcode do
	    install_xcode_plugin(
	      url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
	    )
	end

  desc "Runs linting (and eventually static analysis)"
  lane :analyze do
  	sh "utils/closure_leak_check.sh ../Source"
    #swiftlint(
   			#files option not in this version
   			#files: [
   			#	'AppDelegate.swift',
   			#]
   		#)
  end

  desc "Runs all unit tests."
  lane :test do
    
  	cocoapods
    #if is_ci
      scan(scheme:"Development", skip_slack: false)
    #else
      #scan(scheme:"Development")
    #end
  
  end

 



  desc "Submit new **Beta** build to Hockey app"
  lane :beta do
  	
  	build_number = number_of_commits
		increment_build_number(build_number: build_number)

    sigh(
    	username: inhouse_apple_id,
    	app_identifier: enterprise_wildcard # Have to put wildcard here, otherwise new provisioning profile would be created
    )

    #Setup environments, app identifier and app name
    generate_environment(environment: "AdHoc")

    gym(
    	scheme: "Development",
		  configuration: "AdHoc",
		  clean: true,
		)

    upload_to_hockey(environment: "AdHoc")

    slack(
        message: "New version uploaded to HockeyApp pyco! #{hockey_link}",
        success: true
      )
  end

  lane :upload_to_hockey do |options|
  	# Load hockey app identifier from plist
  	hockey_identifier =  get_environment_plist_value(key: environment_plist_hockey_key, environment:options[:environment])

    if hockey_identifier != ''
    	Helper.log.info "Using public_identifier: #{hockey_identifier}"
			
			hockey(
				api_token: hockey_api_token,
	      public_identifier: hockey_identifier
	    )
		else
			Helper.log.info "No public_identifier found, creating new Hockey app"
			
			hockey(
				api_token: hockey_api_token
	    )
		end


		hockey_link = lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] 
		hockey_build = lane_context[SharedValues::HOCKEY_BUILD_INFORMATION] 
		
		#If there is hockey identifier, save it
		hockey_build_public_identifier = hockey_build['public_identifier']

		if  hockey_build_public_identifier &&  hockey_identifier != hockey_build_public_identifier
			Helper.log.info "Saving hockey identifier: #{hockey_build_public_identifier}"
			set_environment_plist_value(key: environment_plist_hockey_key, value: hockey_build_public_identifier, environments: ["AppStore", "AdHoc", "Development"])

			git_commit(path: "./#{environment_plist_directory}/",
        message: "Added hockey identifier (from Fastlane)")
			
			push_to_git_remote

		end
	end	

  desc "Deploy new version to the App Store (and also hockey app)"
  lane :appstore do

  	build_number = number_of_commits
		increment_build_number(build_number: build_number)

  	#ensure_git_status_clean
		produce(
			username: connect_apple_id,
			app_identifier: app_identifier_appstore,
    	app_name: app_name_appstore,
    	language: app_language,
    )

    snapshot
    sigh(
    		username: connect_apple_id,
    		app_identifier: app_identifier_appstore
    	)

    #Setup environments, app identifier and app name
    generate_environment(environment: "AppStore")

    gym(
		  scheme: "AppStore",
		  clean: true,
		)
		hockey(
			api_token: hockey_api_token,
      notes: '',
      notify: '0', # Means do not notify
      status: '1', # Means do not make available for download
    )
    deliver(
    		username: connect_apple_id
    	)

    slack(
        message: "Deployed new version to AppStore pyco!",
        success: true
      )
  end

  desc "Sets environment.plist app_name and app_bundle_id according to scheme"
  lane :set_environment do |options|
  	
  	if options[:environment]
  		generate_environment(options)
  	else
  		print "Missing environment: in options"
  	end
  end

  
  # Sets value for given in key in selected environments
  private_lane :set_environment_plist_value do |options|
		options[:environments].each { |env| set_info_plist_value(path: "#{environment_plist_directory}/environment-#{env}.plist", key: options[:key], value: options[:value]) }
  end

  #Gets value for given key in environment
  private_lane :get_environment_plist_value do |options|
  		get_info_plist_value(path: "#{environment_plist_directory}/environment-#{options[:environment]}.plist", key: options[:key])
  end

  private_lane :generate_environment do |options|
  		environment = options[:environment]

			display_name = ""
			app_identifier = ""

  		if environment == "AppStore"
  			display_name = app_name_appstore
  			app_identifier = app_identifier_appstore
  		elsif environment == "AdHoc"
  			display_name = app_name_beta
  			app_identifier = app_identifier_beta
  		elsif environment == "Development"
  			display_name = app_name_dev
  			app_identifier = app_identifier_dev
  		else 
  			raise "Non-existent environment: #{environment}"
  		end

  		Helper.log.info "Setting environment for #{environment}"
  		
  		# Change environments according to scheme
			sh "cp '../#{environment_plist_directory}/environment-#{environment}.plist' '../#{environment_plist_directory}/environment.plist'"

  		Helper.log.info "Setting app name to #{display_name}"
  		Helper.log.info "Setting app identifier to #{app_identifier}"
  		
			#TODO: update also product name?
  		update_info_plist(
				plist_path: "Source/Project-Info.plist",
		  	display_name: display_name,  # Display name on local machine is always Dev name
		  	app_identifier:  app_identifier # Identifier on local machine is always Dev
			)
  end

  lane :testing do
  	#set_environment_plist_value(key: environment_plist_hockey_key, value: "tada", environments: ["Development", "AdHoc"])
  	#hockey_identifier =  get_environment_plist_value(key: environment_plist_hockey_key, environment:"AdHoc")

    

  end

  after_all do |lane|
  
  end

  error do |lane, exception|
  	if is_ci
      slack(
        message: exception.message,
        success: false
      )
    end
  end
  
#end